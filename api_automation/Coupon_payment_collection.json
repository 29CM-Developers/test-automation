{
	"info": {
		"_postman_id": "aa14b43b-477e-49c6-a205-c5638e719112",
		"name": "Coupon - Payment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27465778"
	},
	"item": [
		{
			"name": "get inhouse token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response has a property called partner_token\", function () {",
							"    pm.expect(jsonData).to.have.property('dajjeong_inhouse');",
							"});",
							"",
							"pm.environment.set(\"inhouse_token\", jsonData.dajjeong_inhouse.inhouse_token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{qa_host}}/qa/personal/test_environment",
					"host": [
						"{{qa_host}}"
					],
					"path": [
						"qa",
						"personal",
						"test_environment"
					]
				}
			},
			"response": []
		},
		{
			"name": "정률 쿠폰 - 장바구니 10퍼센트 할인 쿠폰",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"장바구니 10% 할인 쿠폰\",\n    \"couponAdminName\": \"일반 쿠폰 / 장바구니 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 0,\n    \"minPayAmount\": 0,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "정률 쿠폰 - 최소 주문 금액과 최대 할인 금액 조건 존재",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"장바구니 10% 할인 쿠폰 / 최대 1만원 할인 / 1만원 이상 구매 시 사용 가능\",\n    \"couponAdminName\": \"일반 장바구니 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "정액 쿠폰 - 상품 10,000원 할인 쿠폰",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"상품 1만원 할인 쿠폰\",\n    \"couponAdminName\": \"일반 상품 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"PRODUCT\",\n    \"duplicateAllowed\": false,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"minPayAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "정률 쿠폰 - 최소 주문 금액 조건 존재",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"상품 1만원 쿠폰 / 1만원 이상 구매 시 사용 가능\",\n    \"couponAdminName\": \"일반 상품 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"PRODUCT\",\n    \"duplicateAllowed\": false,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "정률 쿠폰 - 29CM 직접 발급(특정 회원)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"장바구니 10% 할인 쿠폰\",\n    \"couponAdminName\": \"일반 쿠폰 / 장바구니 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": false,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"TARGET\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "정률 쿠폰 - 29CM 직접 발급(전체 회원)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"장바구니 10% 할인 쿠폰\",\n    \"couponAdminName\": \"일반 쿠폰 / 장바구니 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": false,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "정액 쿠폰 - 총 및 인당 발급 개수 제한",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"maxIssueCount\", jsondata.maxIssueCount)",
							"pm.environment.set(\"maxIssueCountPerPerson\", jsondata.maxIssueCountPerPerson)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"maxIssueCount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxIssueCount).to.eql(pm.environment.get(\"maxIssueCount\"));",
							"});",
							"pm.test(\"maxIssueCountPerPerson 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxIssueCountPerPerson).to.eql(pm.environment.get(\"maxIssueCountPerPerson\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"상품 1만원 할인 쿠폰\",\n    \"couponAdminName\": \"일반 상품 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": false,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"minPayAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"ALL\",\n    \"maxIssueCount\": 10,\n    \"maxIssueCountPerPerson\": 3,\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"maxIssueCount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"maxIssueCountPerPerson 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "정액 쿠폰 - 앱 전용 쿠폰",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"상품 1만원 할인 쿠폰 / 앱 전용 쿠폰\",\n    \"couponAdminName\": \"일반 상품 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"PRODUCT\",\n    \"duplicateAllowed\": false,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"minPayAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "정액 쿠폰 - 웹 전용 쿠폰",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"상품 1만원 할인 쿠폰 / 웹 전용 쿠폰\",\n    \"couponAdminName\": \"일반 상품 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"PRODUCT\",\n    \"duplicateAllowed\": false,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"minPayAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "정액 쿠폰 - 사용 기간 PERIOD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\")",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\")",
							"const useStartDate = pm.environment.get(\"couponUseStartAt\")",
							"const useEndDate = pm.environment.get(\"couponUseEndAt\")",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5) + '+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"const useStartDateString = formatDateString(useStartDate);",
							"const useEndDateString = formatDateString(useEndDate);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"pm.environment.set(\"useStartDateString\", useStartDateString)",
							"pm.environment.set(\"useEndDateString\", useEndDateString)",
							"",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"validDaysFromIssue\", jsondata.validDaysFromIssue)",
							"pm.environment.set(\"couponUseStartAt\", jsondata.couponUseStartAt)",
							"pm.environment.set(\"couponUseEndAt\", jsondata.couponUseEndAt)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"couponUseStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUseStartAt).to.eql(useStartDateString);",
							"});",
							"pm.test(\"couponUseEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUseEndAt).to.eql(useEndDateString);",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)",
							"",
							"",
							"var use_start_date = new Date(currentDate)",
							"use_start_date.setDate(use_start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const use_start_year = use_start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const use_start_month = use_start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const use_start_day = use_start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"const use_start_formattedDate = `${use_start_year}-${use_start_month.toString().padStart(2, '0')}-${use_start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"use_started_date\", use_start_formattedDate)",
							"",
							"var use_end_date = new Date(currentDate)",
							"use_end_date.setDate(use_end_date.getDate()+10); // start_date를 내일 날짜로 설정합니다.",
							"const use_end_year = use_end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const use_end_month = use_end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const use_end_day = use_end_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"const use_end_formattedDate = `${use_end_year}-${use_end_month.toString().padStart(2, '0')}-${use_end_day.toString().padStart(2, '0')}T14:59:59Z`;",
							"",
							"pm.environment.set(\"use_end_date\", use_end_formattedDate)",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"상품 1만원 할인 쿠폰 / 사용 기간 설정\",\n    \"couponAdminName\": \"일반 상품 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"PRODUCT\",\n    \"duplicateAllowed\": false,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"minPayAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"PERIOD\",\n    \"validDaysFromIssue\": 0,\n    \"couponUseStartAt\": \"{{use_started_date}}\",\n    \"couponUseEndAt\": \"{{use_end_date}}\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"couponUseStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUseStartAt).to.eql(pm.environment.get(\"useStartDateString\"));",
							"});",
							"pm.test(\"couponUseEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUseEndAt).to.eql(pm.environment.get(\"useEndDateString\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "정액 쿠폰 - 상품 쿠폰 외부 노출 설정",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\")",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\")",
							"const useStartDate = pm.environment.get(\"couponUseStartAt\")",
							"const useEndDate = pm.environment.get(\"couponUseEndAt\")",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5) + '+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"const useStartDateString = formatDateString(useStartDate);",
							"const useEndDateString = formatDateString(useEndDate);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"pm.environment.set(\"useStartDateString\", useStartDateString)",
							"pm.environment.set(\"useEndDateString\", useEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"validDaysFromIssue\", jsondata.validDaysFromIssue)",
							"pm.environment.set(\"couponUseStartAt\", jsondata.couponUseStartAt)",
							"pm.environment.set(\"couponUseEndAt\", jsondata.couponUseEndAt)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"couponUseStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUseStartAt).to.eql(useStartDateString);",
							"});",
							"pm.test(\"couponUseEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUseEndAt).to.eql(useEndDateString);",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)",
							"",
							"",
							"var use_start_date = new Date(currentDate)",
							"use_start_date.setDate(use_start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const use_start_year = use_start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const use_start_month = use_start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const use_start_day = use_start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"const use_start_formattedDate = `${use_start_year}-${use_start_month.toString().padStart(2, '0')}-${use_start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"use_started_date\", use_start_formattedDate)",
							"",
							"var use_end_date = new Date(currentDate)",
							"use_end_date.setDate(use_end_date.getDate()+10); // start_date를 내일 날짜로 설정합니다.",
							"const use_end_year = use_end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const use_end_month = use_end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const use_end_day = use_end_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"const use_end_formattedDate = `${use_end_year}-${use_end_month.toString().padStart(2, '0')}-${use_end_day.toString().padStart(2, '0')}T14:59:59Z`;",
							"",
							"pm.environment.set(\"use_end_date\", use_end_formattedDate)",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"상품 1만원 할인 쿠폰 / 외부 노출 설정\",\n    \"couponAdminName\": \"일반 상품 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"PRODUCT\",\n    \"duplicateAllowed\": false,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"minPayAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"PERIOD\",\n    \"validDaysFromIssue\": 0,\n    \"couponUseStartAt\": \"{{use_started_date}}\",\n    \"couponUseEndAt\": \"{{use_end_date}}\",\n    \"excludeFromExternalChannel\": true,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"couponUseStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUseStartAt).to.eql(pm.environment.get(\"useStartDateString\"));",
							"});",
							"pm.test(\"couponUseEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUseEndAt).to.eql(pm.environment.get(\"useEndDateString\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 등록 실패 - 쿠폰명 미입력",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"[couponName] must not be blank\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"\",\n    \"couponAdminName\": \"일반 쿠폰 / 장바구니 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 0,\n    \"minPayAmount\": 0,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 등록 실패 - 할인율 미입력",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"[discountValue] is required to be NOT NULL.\");",
							"});",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"[일반 쿠폰] 장바구니 / 정률 쿠폰\",\n    \"couponAdminName\": \"일반 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": \"\",\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 등록 실패 - 할인 금액 미입력",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"[discountValue] is required to be NOT NULL.\");",
							"});",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"[일반 쿠폰] 장바구니 / 정액 쿠폰\",\n    \"couponAdminName\": \"일반 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": \"\",\n    \"minPayAmount\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 등록 실패 - 정액 할인에 최대 할인 금액 설정",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"정액 할인 쿠폰인 경우, 최대 할인 금액 입력이 불가능합니다.\");",
							"});",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"[일반 쿠폰] 장바구니 / 정액 쿠폰\",\n    \"couponAdminName\": \"일반 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"minPayAmount\": 10000,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 등록 실패 - 일반 쿠폰에 비용 분담 설정",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"일반 쿠폰은 비용 분담이 불가능합니다.\");",
							"});",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"[일반 쿠폰] 장바구니 / 정액 쿠폰\",\n    \"couponAdminName\": \"일반 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"minPayAmount\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 등록 실패 - 총 제한 개수보다 인당 제한 개수가 더 큼",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"인당 발급 쿠폰 개수가 총 발급 개수 보다 많습니다.\");",
							"});",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"상품 1만원 할인 쿠폰\",\n    \"couponAdminName\": \"일반 상품 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": false,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"minPayAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"ALL\",\n    \"maxIssueCount\": 5,\n    \"maxIssueCountPerPerson\": 10,\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 등록 실패 - 발급 시작 시각이 현재보다 이전",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()-1); // start_date를 어제 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"발급 시작 일시는 현재보다 미래 일시여야 합니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"[일반 쿠폰] 장바구니 / 정률 쿠폰\",\n    \"couponAdminName\": \"일반 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 등록 실패 - 발급 종료 시각이 시작 시각보다 이전",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+7); // start_date를 7일 후 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+5); // end_date를 5일 후 날짜로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"발급 종료 일시는 발급 시작 일시 보다 미래 일시여야 합니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"[일반 쿠폰] 장바구니 / 정률 쿠폰\",\n    \"couponAdminName\": \"일반 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 등록 실패 - 사용 기간 유효 일수 미입력",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 7일 후 날짜로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"발급일로부터 사용 가능한 유효일수는 필수값 입니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"[일반 쿠폰] 장바구니 / 정률 쿠폰\",\n    \"couponAdminName\": \"일반 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": \"\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 등록 실패 - 사용 기간 미입력",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 7일 후 날짜로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"사용 시작 일시는 필수값 입니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"[일반 쿠폰] 장바구니 / 정률 쿠폰\",\n    \"couponAdminName\": \"일반 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"PERIOD\",\n    \"couponUseStartAt\": \"\",\n    \"couponUseEndAt\": \"\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 등록 실패 - 사용 종료가 발급 종료보다 이전",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)",
							"",
							"",
							"var use_start_date = new Date(currentDate)",
							"use_start_date.setDate(use_start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const use_start_year = use_start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const use_start_month = use_start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const use_start_day = use_start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"const use_start_formattedDate = `${use_start_year}-${use_start_month.toString().padStart(2, '0')}-${use_start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"use_started_date\", use_start_formattedDate)",
							"",
							"var use_end_date = new Date(currentDate)",
							"use_end_date.setDate(use_end_date.getDate()+5); // start_date를 내일 날짜로 설정합니다.",
							"const use_end_year = use_end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const use_end_month = use_end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const use_end_day = use_end_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"const use_end_formattedDate = `${use_end_year}-${use_end_month.toString().padStart(2, '0')}-${use_end_day.toString().padStart(2, '0')}T14:59:59Z`;",
							"",
							"pm.environment.set(\"use_end_date\", use_end_formattedDate)",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"사용 종료 일시는 발급 종료 일시보다 미래 일시여야 합니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"[일반 쿠폰] 장바구니 / 정률 쿠폰\",\n    \"couponAdminName\": \"일반 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"PERIOD\",\n    \"couponUseStartAt\": \"{{use_started_date}}\",\n    \"couponUseEndAt\": \"{{use_end_date}}\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 등록 실패 - 장바구니 쿠폰 외부 노출 설정",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"장바구니 쿠폰의 경우, 외부 채널 노출 설정을 할 수 없습니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"장바구니 쿠폰\",\n    \"couponAdminName\": \"일반 쿠폰 / 장바구니 쿠폰\",\n    \"couponRegistrationType\": \"COMMON\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 0,\n    \"minPayAmount\": 0,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 3,\n    \"excludeFromExternalChannel\": true,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "첫구매 쿠폰 - 정률 할인",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"2999-12-31T23:59:59.999999999+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"const year = currentDate.getFullYear(); // 현재 연도를 얻습니다.",
							"const month = currentDate.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"",
							"// 오늘을 기준으로 설정합니다.",
							"const start_day = currentDate.getDate().toString().padStart(2, '0');",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${year}-${month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"// 0일을 넣어서 현재 월의 마지막 날을 얻습니다.",
							"const lastDayOfMonth = new Date(year, month, 0); ",
							"",
							"const end_day = lastDayOfMonth.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"const hours = currentDate.getHours(); // 현재 시간(0-23)",
							"const minutes = currentDate.getMinutes(); // 현재 분(0-59)",
							"const seconds = currentDate.getSeconds(); // 현재 초(0-59)",
							"const milliseconds = currentDate.getMilliseconds(); // 현재 밀리초(0-999)",
							"// const hours = '14'; // 시간을 14로 설정합니다.",
							"// const minutes = '59'; // 분을 59로 설정합니다.",
							"// const seconds = '59'; // 초를 59로 설정합니다.",
							"// const milliseconds = '999999999'; // 밀리초를 999999999로 설정합니다.",
							"",
							"const End_formattedDate = `${year}-${month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}.${milliseconds}Z`;",
							"console.log(End_formattedDate)",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"첫구매 쿠폰 / 정률 핳인\",\n    \"couponAdminName\": \"첫구매 쿠폰\",\n    \"couponRegistrationType\": \"FIRST_ORDER\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": true,\n    \"firstCouponType\": \"SIGN_UP\",\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 0,\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 10,\n    \"couponIssueType\": \"CONDITIONAL\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"3000-01-01T00:00:00+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "첫구매 쿠폰 - 정액 할인",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"2999-12-31T23:59:59.999999999+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"const year = currentDate.getFullYear(); // 현재 연도를 얻습니다.",
							"const month = currentDate.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"",
							"// 오늘을 기준으로 설정합니다.",
							"const start_day = currentDate.getDate().toString().padStart(2, '0');",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${year}-${month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"// 0일을 넣어서 현재 월의 마지막 날을 얻습니다.",
							"const lastDayOfMonth = new Date(year, month, 0); ",
							"",
							"const end_day = lastDayOfMonth.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"const hours = currentDate.getHours(); // 현재 시간(0-23)",
							"const minutes = currentDate.getMinutes(); // 현재 분(0-59)",
							"const seconds = currentDate.getSeconds(); // 현재 초(0-59)",
							"const milliseconds = currentDate.getMilliseconds(); // 현재 밀리초(0-999)",
							"// const hours = '14'; // 시간을 14로 설정합니다.",
							"// const minutes = '59'; // 분을 59로 설정합니다.",
							"// const seconds = '59'; // 초를 59로 설정합니다.",
							"// const milliseconds = '999999999'; // 밀리초를 999999999로 설정합니다.",
							"",
							"const End_formattedDate = `${year}-${month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}.${milliseconds}Z`;",
							"console.log(End_formattedDate)",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"첫구매 쿠폰 / 정액 할인\",\n    \"couponAdminName\": \"첫구매 쿠폰\",\n    \"couponRegistrationType\": \"FIRST_ORDER\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": true,\n    \"firstCouponType\": \"SIGN_UP\",\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"minPayAmount\": 10000,\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 10,\n    \"couponIssueType\": \"CONDITIONAL\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"3000-01-01T00:00:00+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "첫구매 쿠폰 - 앱 전용 쿠폰",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"2999-12-31T23:59:59.999999999+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"const year = currentDate.getFullYear(); // 현재 연도를 얻습니다.",
							"const month = currentDate.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"",
							"// 오늘을 기준으로 설정합니다.",
							"const start_day = currentDate.getDate().toString().padStart(2, '0');",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${year}-${month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"// 0일을 넣어서 현재 월의 마지막 날을 얻습니다.",
							"const lastDayOfMonth = new Date(year, month, 0); ",
							"",
							"const end_day = lastDayOfMonth.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"const hours = currentDate.getHours(); // 현재 시간(0-23)",
							"const minutes = currentDate.getMinutes(); // 현재 분(0-59)",
							"const seconds = currentDate.getSeconds(); // 현재 초(0-59)",
							"const milliseconds = currentDate.getMilliseconds(); // 현재 밀리초(0-999)",
							"// const hours = '14'; // 시간을 14로 설정합니다.",
							"// const minutes = '59'; // 분을 59로 설정합니다.",
							"// const seconds = '59'; // 초를 59로 설정합니다.",
							"// const milliseconds = '999999999'; // 밀리초를 999999999로 설정합니다.",
							"",
							"const End_formattedDate = `${year}-${month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}.${milliseconds}Z`;",
							"console.log(End_formattedDate)",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"첫구매 쿠폰 / 정액 할인\",\n    \"couponAdminName\": \"첫구매 쿠폰\",\n    \"couponRegistrationType\": \"FIRST_ORDER\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": true,\n    \"firstCouponType\": \"SIGN_UP\",\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"minPayAmount\": 10000,\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 10,\n    \"couponIssueType\": \"CONDITIONAL\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"couponUsePlatform\": \"APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"3000-01-01T00:00:00+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "첫구매 쿠폰 - 웹 전용 쿠폰",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"2999-12-31T23:59:59.999999999+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"const year = currentDate.getFullYear(); // 현재 연도를 얻습니다.",
							"const month = currentDate.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"",
							"// 오늘을 기준으로 설정합니다.",
							"const start_day = currentDate.getDate().toString().padStart(2, '0');",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${year}-${month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"// 0일을 넣어서 현재 월의 마지막 날을 얻습니다.",
							"const lastDayOfMonth = new Date(year, month, 0); ",
							"",
							"const end_day = lastDayOfMonth.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"const hours = currentDate.getHours(); // 현재 시간(0-23)",
							"const minutes = currentDate.getMinutes(); // 현재 분(0-59)",
							"const seconds = currentDate.getSeconds(); // 현재 초(0-59)",
							"const milliseconds = currentDate.getMilliseconds(); // 현재 밀리초(0-999)",
							"// const hours = '14'; // 시간을 14로 설정합니다.",
							"// const minutes = '59'; // 분을 59로 설정합니다.",
							"// const seconds = '59'; // 초를 59로 설정합니다.",
							"// const milliseconds = '999999999'; // 밀리초를 999999999로 설정합니다.",
							"",
							"const End_formattedDate = `${year}-${month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}.${milliseconds}Z`;",
							"console.log(End_formattedDate)",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"첫구매 쿠폰 / 정액 할인\",\n    \"couponAdminName\": \"첫구매 쿠폰\",\n    \"couponRegistrationType\": \"FIRST_ORDER\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": true,\n    \"firstCouponType\": \"SIGN_UP\",\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"minPayAmount\": 10000,\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 10,\n    \"couponIssueType\": \"CONDITIONAL\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"couponUsePlatform\": \"APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"3000-01-01T00:00:00+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "첫구매 쿠폰 등록 실패 - 비용 분담 설정",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"첫 구매 쿠폰은 비용 분담 설정을 할 수 없습니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"const year = currentDate.getFullYear(); // 현재 연도를 얻습니다.",
							"const month = currentDate.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"",
							"// 오늘을 기준으로 설정합니다.",
							"const start_day = currentDate.getDate().toString().padStart(2, '0');",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${year}-${month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"// 0일을 넣어서 현재 월의 마지막 날을 얻습니다.",
							"const lastDayOfMonth = new Date(year, month, 0); ",
							"",
							"const end_day = lastDayOfMonth.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"const hours = currentDate.getHours(); // 현재 시간(0-23)",
							"const minutes = currentDate.getMinutes(); // 현재 분(0-59)",
							"const seconds = currentDate.getSeconds(); // 현재 초(0-59)",
							"const milliseconds = currentDate.getMilliseconds(); // 현재 밀리초(0-999)",
							"// const hours = '14'; // 시간을 14로 설정합니다.",
							"// const minutes = '59'; // 분을 59로 설정합니다.",
							"// const seconds = '59'; // 초를 59로 설정합니다.",
							"// const milliseconds = '999999999'; // 밀리초를 999999999로 설정합니다.",
							"",
							"const End_formattedDate = `${year}-${month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}.${milliseconds}Z`;",
							"console.log(End_formattedDate)",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"첫구매 쿠폰 / 정액 할인\",\n    \"couponAdminName\": \"첫구매 쿠폰\",\n    \"couponRegistrationType\": \"FIRST_ORDER\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": true,\n    \"firstCouponType\": \"SIGN_UP\",\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 0,\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 10,\n    \"couponIssueType\": \"CONDITIONAL\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "첫구매 쿠폰 등록 실패 - 상품 쿠폰으로 등록",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"첫 구매 쿠폰은 상품 쿠폰으로 등록할 수 없습니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"첫구매 쿠폰 / 장바구니 쿠폰\",\n    \"couponAdminName\": \"첫구매 쿠폰\",\n    \"couponRegistrationType\": \"FIRST_ORDER\",\n    \"couponType\": \"PRODUCT\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": true,\n    \"firstCouponType\": \"SIGN_UP\",\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 0,\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 10,\n    \"couponIssueType\": \"CONDITIONAL\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"validDaysFromIssue\": 2,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "첫구매 쿠폰 등록 실패 - 직접 발급 방식으로 등록",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"첫 구매 쿠폰은 조건부 + 전체 회원 발급 방식만 지원합니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"첫구매 쿠폰 / 장바구니 쿠폰\",\n    \"couponAdminName\": \"첫구매 쿠폰\",\n    \"couponRegistrationType\": \"FIRST_ORDER\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": true,\n    \"firstCouponType\": \"SIGN_UP\",\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 0,\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 10,\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"validDaysFromIssue\": 2,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "첫구매 쿠폰 등록 실패 - 고객 다운로드 방식으로 등록",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"첫 구매 쿠폰은 조건부 + 전체 회원 발급 방식만 지원합니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"첫구매 쿠폰 / 장바구니 쿠폰\",\n    \"couponAdminName\": \"첫구매 쿠폰\",\n    \"couponRegistrationType\": \"FIRST_ORDER\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": true,\n    \"firstCouponType\": \"SIGN_UP\",\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 0,\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 10,\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"validDaysFromIssue\": 2,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "첫구매 쿠폰 등록 실패 - 총 발급 제한 개수 설정",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"첫 구매 쿠폰은 총 발급 제한 개수를 설정할 수 없습니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"첫구매 쿠폰 / 장바구니 쿠폰\",\n    \"couponAdminName\": \"첫구매 쿠폰\",\n    \"couponRegistrationType\": \"FIRST_ORDER\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": true,\n    \"firstCouponType\": \"SIGN_UP\",\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 0,\n    \"maxIssueCount\": 10,\n    \"maxIssueCountPerPerson\": 0,\n    \"couponIssueType\": \"CONDITIONAL\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"validDaysFromIssue\": 2,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "첫구매 쿠폰 등록 실패 - 쿠폰 사용 기간 설정 안함",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"첫 구매 쿠폰 사용 기간은 발급일 기준으로 설정되어야 합니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"첫구매 쿠폰 / 장바구니 쿠폰\",\n    \"couponAdminName\": \"첫구매 쿠폰\",\n    \"couponRegistrationType\": \"FIRST_ORDER\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": true,\n    \"firstCouponType\": \"SIGN_UP\",\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 0,\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 0,\n    \"couponIssueType\": \"CONDITIONAL\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"couponUsePeriodType\": \"NONE\",\n    \"validDaysFromIssue\": 0,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "첫구매 쿠폰 등록 실패 - 쿠폰 사용 기간으로 설정",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)",
							"",
							"",
							"var use_start_date = new Date(currentDate)",
							"use_start_date.setDate(use_start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const use_start_year = use_start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const use_start_month = use_start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const use_start_day = use_start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"const use_start_formattedDate = `${use_start_year}-${use_start_month.toString().padStart(2, '0')}-${use_start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"use_started_date\", use_start_formattedDate)",
							"",
							"var use_end_date = new Date(currentDate)",
							"use_end_date.setDate(use_end_date.getDate()+10); // start_date를 내일 날짜로 설정합니다.",
							"const use_end_year = use_end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const use_end_month = use_end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const use_end_day = use_end_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"const use_end_formattedDate = `${use_end_year}-${use_end_month.toString().padStart(2, '0')}-${use_end_day.toString().padStart(2, '0')}T14:59:59Z`;",
							"",
							"pm.environment.set(\"use_end_date\", use_end_formattedDate)",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"첫 구매 쿠폰 사용 기간은 발급일 기준으로 설정되어야 합니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"첫구매 쿠폰 / 장바구니 쿠폰\",\n    \"couponAdminName\": \"첫구매 쿠폰\",\n    \"couponRegistrationType\": \"FIRST_ORDER\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": true,\n    \"firstCouponType\": \"SIGN_UP\",\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 0,\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 0,\n    \"couponIssueType\": \"CONDITIONAL\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"couponUsePeriodType\": \"PERIOD\",\n    \"validDaysFromIssue\": 0,\n    \"couponUseStartAt\": \"{{use_started_date}}\",\n    \"couponUseEndAt\": \"{{use_end_date}}\",\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "첫구매 쿠폰 등록 실패 - 외부 노출 설정",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"장바구니 쿠폰의 경우, 외부 채널 노출 설정을 할 수 없습니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"첫구매 쿠폰 / 장바구니 쿠폰\",\n    \"couponAdminName\": \"첫구매 쿠폰\",\n    \"couponRegistrationType\": \"FIRST_ORDER\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"firstCoupon\": true,\n    \"firstCouponType\": \"SIGN_UP\",\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 0,\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 0,\n    \"couponIssueType\": \"CONDITIONAL\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"excludeFromExternalChannel\": true,\n    \"unlimitedCoupon\": false,\n    \"validDaysFromIssue\": 2,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "비용 분담 쿠폰",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"비용 분담 쿠폰 / 29CM 50 / 파트너 50\",\n    \"couponAdminName\": \"비용 분담 쿠폰\",\n    \"couponRegistrationType\": \"PAY_RATE\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": false,\n    \"couponType\": \"PRODUCT\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "비용 분담 쿠폰 - 최소 주문 금액과 최대 할인 금액 설정",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"50대50 비용 분담 쿠폰 / 10% 할인(최대 1만원) / 2만원 이상부터 사용 가능\",\n    \"couponAdminName\": \"비용 분담 쿠폰\",\n    \"couponRegistrationType\": \"PAY_RATE\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": false,\n    \"couponType\": \"PRODUCT\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 20000,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "비용 분담 쿠폰 - 중복 불가능 파트너 100",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"비용 분담 쿠폰 / 파트너 100%\",\n    \"couponAdminName\": \"비용 분담 쿠폰\",\n    \"couponRegistrationType\": \"PAY_RATE\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": false,\n    \"couponType\": \"PRODUCT\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 0,\n    \"partnerPayRate\": 100,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "비용 분담 쿠폰 - 중복 가능 파트너 100",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"비용 분담 쿠폰 / 파트너 100% (중복 가능)\",\n    \"couponAdminName\": \"비용 분담 쿠폰\",\n    \"couponRegistrationType\": \"PAY_RATE\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": true,\n    \"couponType\": \"PRODUCT\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 0,\n    \"partnerPayRate\": 100,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "비용 분담 쿠폰 - 앱 전용",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"비용 분담 쿠폰 / 29CM 50 / 파트너 50\",\n    \"couponAdminName\": \"비용 분담 쿠폰\",\n    \"couponRegistrationType\": \"PAY_RATE\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": false,\n    \"couponType\": \"PRODUCT\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "비용 분담 쿠폰 - 웹 전용",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"비용 분담 쿠폰 / 29CM 50 / 파트너 50\",\n    \"couponAdminName\": \"비용 분담 쿠폰\",\n    \"couponRegistrationType\": \"PAY_RATE\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": false,\n    \"couponType\": \"PRODUCT\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "비용 분담 쿠폰 - 사용 기간 None",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"비용 분담 쿠폰 / 29CM 50,파트너 50 / 사용 기간 설정 없음\",\n    \"couponAdminName\": \"비용 분담 쿠폰\",\n    \"couponRegistrationType\": \"PAY_RATE\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": false,\n    \"couponType\": \"PRODUCT\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"NONE\",\n    \"validDaysFromIssue\": 0,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "비용 분담 쿠폰 - 사용 기간 PERIOD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\")",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\")",
							"const useStartDate = pm.environment.get(\"couponUseStartAt\")",
							"const useEndDate = pm.environment.get(\"couponUseEndAt\")",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5) + '+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"const useStartDateString = formatDateString(useStartDate);",
							"const useEndDateString = formatDateString(useEndDate);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"pm.environment.set(\"useStartDateString\", useStartDateString)",
							"pm.environment.set(\"useEndDateString\", useEndDateString)",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"validDaysFromIssue\", jsondata.validDaysFromIssue)",
							"pm.environment.set(\"couponUseStartAt\", jsondata.couponUseStartAt)",
							"pm.environment.set(\"couponUseEndAt\", jsondata.couponUseEndAt)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"couponUseStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUseStartAt).to.eql(useStartDateString);",
							"});",
							"pm.test(\"couponUseEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUseEndAt).to.eql(useEndDateString);",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)",
							"",
							"",
							"var use_start_date = new Date(currentDate)",
							"use_start_date.setDate(use_start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const use_start_year = use_start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const use_start_month = use_start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const use_start_day = use_start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"const use_start_formattedDate = `${use_start_year}-${use_start_month.toString().padStart(2, '0')}-${use_start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"use_started_date\", use_start_formattedDate)",
							"",
							"var use_end_date = new Date(currentDate)",
							"use_end_date.setDate(use_end_date.getDate()+10); // start_date를 내일 날짜로 설정합니다.",
							"const use_end_year = use_end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const use_end_month = use_end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const use_end_day = use_end_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"const use_end_formattedDate = `${use_end_year}-${use_end_month.toString().padStart(2, '0')}-${use_end_day.toString().padStart(2, '0')}T14:59:59Z`;",
							"",
							"pm.environment.set(\"use_end_date\", use_end_formattedDate)",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"비용 분담 쿠폰 / 29CM 50,파트너 50 / 사용 기간 설정\",\n    \"couponAdminName\": \"비용 분담 쿠폰\",\n    \"couponRegistrationType\": \"PAY_RATE\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": false,\n    \"couponType\": \"PRODUCT\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"PERIOD\",\n    \"validDaysFromIssue\": 0,\n    \"couponUseStartAt\": \"{{use_started_date}}\",\n    \"couponUseEndAt\": \"{{use_end_date}}\",\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"couponUseStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUseStartAt).to.eql(pm.environment.get(\"useStartDateString\"));",
							"});",
							"pm.test(\"couponUseEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUseEndAt).to.eql(pm.environment.get(\"useEndDateString\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "비용 분담 쿠폰 - 외부 노출 설정",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// 주어진 날짜 문자열",
							"const StartDateString = pm.environment.get(\"couponIssueStartAt\");",
							"const EndDateString = pm.environment.get(\"couponIssueEndAt\");",
							"",
							"const formatDateString = (dateString) => {",
							"  const date = new Date(dateString);",
							"  date.setMilliseconds(0);",
							"  date.setUTCHours(date.getUTCHours() + 9);",
							"  date.setDate(date.getDate());",
							"  return date.toISOString().slice(0, -5)+'+09:00';",
							"};",
							"",
							"const formattedStartDateString = formatDateString(StartDateString);",
							"const formattedEndDateString = formatDateString(EndDateString);",
							"pm.environment.set(\"formattedStartDateString\", formattedStartDateString)",
							"pm.environment.set(\"formattedEndDateString\", formattedEndDateString)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueStartAt\", jsondata.couponIssueStartAt)",
							"pm.environment.set(\"couponIssueEndAt\", jsondata.couponIssueEndAt)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(formattedStartDateString);",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(formattedEndDateString);",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"비용 분담 쿠폰 / 29CM 50,파트너 50 / 사용 기간 설정 없음\",\n    \"couponAdminName\": \"비용 분담 쿠폰\",\n    \"couponRegistrationType\": \"PAY_RATE\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": false,\n    \"couponType\": \"PRODUCT\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"NONE\",\n    \"validDaysFromIssue\": 0,\n    \"excludeFromExternalChannel\": true,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueStartAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueStartAt).to.eql(pm.environment.get(\"formattedStartDateString\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(pm.environment.get(\"formattedEndDateString\"));",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "비용 분담 쿠폰 등록 실패 - 장바구니 쿠폰",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"비용 분담 쿠폰은 장바구니 쿠폰으로 등록할 수 없습니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"비용 분담 쿠폰 / 29CM 50 / 파트너 50\",\n    \"couponAdminName\": \"비용 분담 쿠폰\",\n    \"couponRegistrationType\": \"PAY_RATE\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": false,\n    \"couponType\": \"CART\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "비용 분담 쿠폰 등록 실패 - 정액 할인",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"비용 분담 쿠폰은 정액 할인 쿠폰으로 등록할 수 없습니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"분담 바율 쿠폰\",\n    \"couponAdminName\": \"분담 비율 쿠폰\",\n    \"couponRegistrationType\": \"PAY_RATE\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": false,\n    \"couponType\": \"PRODUCT\",\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"minPayAmount\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DOWNLOAD\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "비용 분담 쿠폰 등록 실패 - 특정 회원 직접 발급",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"비용 분담 쿠폰은 직접 발급 방식으로 등록할 수 없습니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"비용 분담 쿠폰 / 29CM 50 / 파트너 50\",\n    \"couponAdminName\": \"비용 분담 쿠폰\",\n    \"couponRegistrationType\": \"PAY_RATE\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": false,\n    \"couponType\": \"PRODUCT\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"TARGET\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "비용 분담 쿠폰 등록 실패 - 전체 회원 직접 발급",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"비용 분담 쿠폰은 직접 발급 방식으로 등록할 수 없습니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date(); // 현재 날짜와 시간을 얻습니다.",
							"",
							"var start_date = new Date(currentDate);",
							"start_date.setDate(start_date.getDate()+1); // start_date를 내일 날짜로 설정합니다.",
							"const start_year = start_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const start_month = start_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const start_day = start_date.getDate(); // 내일 일자를 얻습니다.",
							"",
							"// 날짜 및 시간 문자열을 만듭니다.",
							"const start_formattedDate = `${start_year}-${start_month.toString().padStart(2, '0')}-${start_day.toString().padStart(2, '0')}T15:00:00Z`;",
							"",
							"pm.environment.set(\"started_date\", start_formattedDate)",
							"",
							"var end_date = new Date(currentDate);",
							"end_date.setDate(end_date.getDate()+7); // end_date를 오늘보다 7일 뒤로 설정합니다.",
							"const end_year = end_date.getFullYear(); // 현재 연도를 얻습니다.",
							"const end_month = end_date.getMonth() + 1; // 현재 월을 얻습니다. (0부터 시작하므로 +1을 해줍니다.)",
							"const end_day = end_date.getDate().toString().padStart(2, '0'); // 날짜를 얻고 두 자릿수로 패딩합니다.",
							"",
							"const hours = '14'; // 시간을 14로 설정합니다.",
							"const minutes = '59'; // 분을 59로 설정합니다.",
							"const seconds = '59'; // 초를 59로 설정합니다.",
							"",
							"const End_formattedDate = `${end_year}-${end_month.toString().padStart(2, '0')}-${end_day}T${hours}:${minutes}:${seconds}Z`;",
							"",
							"pm.environment.set(\"ended_date\", End_formattedDate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"비용 분담 쿠폰 / 29CM 50 / 파트너 50\",\n    \"couponAdminName\": \"비용 분담 쿠폰\",\n    \"couponRegistrationType\": \"PAY_RATE\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": false,\n    \"couponType\": \"PRODUCT\",\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"couponIssueStartAt\": \"{{started_date}}\",\n    \"couponIssueEndAt\": \"{{ended_date}}\",\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"ALL\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"ISSUE_DATE\",\n    \"validDaysFromIssue\": 2,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 0\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "등급 쿠폰 - 정률 할인",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"2999-12-31T23:59:59.999999999+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"등급 쿠폰 / 20% 할인\",\n    \"couponAdminName\": \"등급 쿠폰\",\n    \"couponRegistrationType\": \"USER_GRADE\",\n    \"couponType\": \"CART\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": true,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 20,\n    \"minPayAmount\": 0,\n    \"maxDiscountAmount\": 0,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"USER_GRADE\",\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 0,\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"NONE\",\n    \"validDaysFromIssue\": 0,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 100\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"3000-01-01T00:00:00+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "등급 쿠폰 - 정액 할인",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"2999-12-31T23:59:59.999999999+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"등급 쿠폰 / 10,000원 할인\",\n    \"couponAdminName\": \"등급 쿠폰\",\n    \"couponRegistrationType\": \"USER_GRADE\",\n    \"couponType\": \"CART\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": true,\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"minPayAmount\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"USER_GRADE\",\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 0,\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"NONE\",\n    \"validDaysFromIssue\": 0,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 100\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"3000-01-01T00:00:00+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "등급 쿠폰 - 최소 주문 금액과 최대 할인 금액 설정",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// request data",
							"var jsondata = JSON.parse(request.data)",
							"// response data",
							"var responsejsondata = pm.response.json()",
							"",
							"// data set",
							"pm.environment.set('couponId', responsejsondata.data.couponId)",
							"",
							"// keys test",
							"pm.test(\"Response data contains all(35) keys\", function () {",
							"    var expectedDataKeys = [\"couponId\", \"couponRegistrationType\", \"issuer\", \"couponType\", \"duplicateAllowed\", \"couponName\", \"couponAdminName\", \"discountType\", \"discountValue\", \"inhousePayRate\", \"partnerPayRate\", \"minPayAmount\", \"maxDiscountAmount\", \"couponIssueType\", \"issueTarget\", \"maxIssueCount\", \"maxIssueCountPerPerson\", \"couponIssueStartAt\", \"couponIssueEndAt\", \"couponUsePlatform\", \"couponUsePeriodType\", \"validDaysFromIssue\", \"couponUseStartAt\", \"couponUseEndAt\", \"firstCoupon\", \"firstCouponType\", \"excludeFromExternalChannel\", \"unlimitedCoupon\", \"giftCoupon\", \"serialCouponQty\", \"keyword\", \"disabled\", \"adminId\", \"couponStatus\", \"createdAt\"];",
							"    pm.expect(Object.keys(responsejsondata.data)).to.include.members(expectedDataKeys);",
							"});",
							"// set request value",
							"pm.environment.set(\"couponName\", jsondata.couponName)",
							"pm.environment.set(\"couponAdminName\", jsondata.couponAdminName)",
							"pm.environment.set(\"couponRegistrationType\", jsondata.couponRegistrationType)",
							"pm.environment.set(\"couponType\", jsondata.couponType)",
							"pm.environment.set(\"duplicateAllowed\", jsondata.duplicateAllowed)",
							"pm.environment.set(\"firstCoupon\", jsondata.firstCoupon)",
							"pm.environment.set(\"firstCouponType\", jsondata.firstCouponType)",
							"pm.environment.set(\"couponIssueType\", jsondata.couponIssueType)",
							"pm.environment.set(\"couponUsePeriodType\", jsondata.couponUsePeriodType)",
							"pm.environment.set(\"couponUsePlatform\", jsondata.couponUsePlatform)",
							"pm.environment.set(\"discountType\", jsondata.discountType)",
							"pm.environment.set(\"discountValue\", jsondata.discountValue)",
							"pm.environment.set(\"maxDiscountAmount\", jsondata.maxDiscountAmount)",
							"pm.environment.set(\"minPayAmount\", jsondata.minPayAmount)",
							"pm.environment.set(\"inhousePayRate\", jsondata.inhousePayRate)",
							"pm.environment.set(\"partnerPayRate\", jsondata.partnerPayRate)",
							"pm.environment.set(\"issueTarget\", jsondata.issueTarget)",
							"pm.environment.set(\"excludeFromExternalChannel\", jsondata.excludeFromExternalChannel)",
							"pm.environment.set(\"unlimitedCoupon\", jsondata.unlimitedCoupon)",
							"pm.environment.set(\"serialCouponQty\", jsondata.serialCouponQty)",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"2999-12-31T23:59:59.999999999+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"등급 쿠폰 / 20% 할인(최대 1만원) / 2만원 이상부터 사용 가능\",\n    \"couponAdminName\": \"등급 쿠폰\",\n    \"couponRegistrationType\": \"USER_GRADE\",\n    \"couponType\": \"CART\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": true,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 20,\n    \"minPayAmount\": 20000,\n    \"maxDiscountAmount\": 10000,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"USER_GRADE\",\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 0,\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"NONE\",\n    \"validDaysFromIssue\": 0,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 100\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "쿠폰 조회",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsejsondata = pm.response.json()",
							"",
							"// value test",
							"pm.test(\"일반 쿠폰 생성 응답 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"result 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.result).to.eql(\"SUCCESS\");",
							"});",
							"pm.test(\"couponRegistrationType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponRegistrationType).to.eql(pm.environment.get(\"couponRegistrationType\"));",
							"});",
							"pm.test(\"issuer 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issuer).to.eql(\"INHOUSE\");",
							"});",
							"pm.test(\"couponType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponType).to.eql(pm.environment.get(\"couponType\"));",
							"});",
							"pm.test(\"duplicateAllowed 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.duplicateAllowed).to.eql(pm.environment.get(\"duplicateAllowed\"));",
							"});",
							"pm.test(\"couponName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponName).to.eql(pm.environment.get(\"couponName\"));",
							"});",
							"pm.test(\"couponAdminName 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponAdminName).to.eql(pm.environment.get(\"couponAdminName\"));",
							"});",
							"pm.test(\"discountType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountType).to.eql(pm.environment.get(\"discountType\"));",
							"});",
							"pm.test(\"discountValue 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.discountValue).to.eql(pm.environment.get(\"discountValue\"));",
							"});",
							"pm.test(\"inhousePayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.inhousePayRate).to.eql(pm.environment.get(\"inhousePayRate\"));",
							"});",
							"pm.test(\"partnerPayRate 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.partnerPayRate).to.eql(pm.environment.get(\"partnerPayRate\"));",
							"});",
							"pm.test(\"minPayAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.minPayAmount).to.eql(pm.environment.get(\"minPayAmount\"));",
							"});",
							"pm.test(\"maxDiscountAmount 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.maxDiscountAmount).to.eql(pm.environment.get(\"maxDiscountAmount\"));",
							"});",
							"pm.test(\"couponIssueType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueType).to.eql(pm.environment.get(\"couponIssueType\"));",
							"});",
							"pm.test(\"issueTarget 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.issueTarget).to.eql(pm.environment.get(\"issueTarget\"));",
							"});",
							"pm.test(\"couponIssueEndAt 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponIssueEndAt).to.eql(\"3000-01-01T00:00:00+09:00\");",
							"});",
							"pm.test(\"couponUsePlatform 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePlatform).to.eql(pm.environment.get(\"couponUsePlatform\"));",
							"});",
							"pm.test(\"couponUsePeriodType 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponUsePeriodType).to.eql(pm.environment.get(\"couponUsePeriodType\"));",
							"});",
							"pm.test(\"firstCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.firstCoupon).to.eql(pm.environment.get(\"firstCoupon\"));",
							"});",
							"pm.test(\"excludeFromExternalChannel 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.excludeFromExternalChannel).to.eql(pm.environment.get(\"excludeFromExternalChannel\"));",
							"});",
							"pm.test(\"unlimitedCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.unlimitedCoupon).to.eql(pm.environment.get(\"unlimitedCoupon\"));",
							"});",
							"pm.test(\"giftCoupon 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.giftCoupon).to.eql(false);",
							"});",
							"pm.test(\"serialCouponQty 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.serialCouponQty).to.eql(pm.environment.get(\"serialCouponQty\"));",
							"});",
							"pm.test(\"disabled 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.disabled).to.eql(false);",
							"});",
							"pm.test(\"couponStatus 유효성 체크\", function () {",
							"    pm.expect(responsejsondata.data.couponStatus).to.eql(\"REGISTRATION_COMPLETED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons/{{couponId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons",
						"{{couponId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "등급 쿠폰 등록 실패 - 상품 쿠폰",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"등급 쿠폰은 상품 쿠폰으로 등록할 수 없습니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"등급 쿠폰\",\n    \"couponAdminName\": \"등급 쿠폰\",\n    \"couponRegistrationType\": \"USER_GRADE\",\n    \"couponType\": \"PRODUCT\",\n    \"duplicateAllowed\": true,\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"USER_GRADE\",\n    \"couponUsePeriodType\": \"NONE\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"minPayAmount\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 0,\n    \"unlimitedCoupon\": false,\n    \"excludeFromExternalChannel\": false,\n    \"validDaysFromIssue\": 0,\n    \"serialCouponQty\": 100\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "등급 쿠폰 등록 실패 - 비용 분담 설정",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"등급 쿠폰은 비용 분담이 불가능합니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"등급 쿠폰\",\n    \"couponAdminName\": \"등급 쿠폰\",\n    \"couponRegistrationType\": \"USER_GRADE\",\n    \"couponType\": \"CART\",\n    \"duplicateAllowed\": true,\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"USER_GRADE\",\n    \"couponUsePeriodType\": \"NONE\",\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"discountType\": \"FIXED_PRICE\",\n    \"discountValue\": 10000,\n    \"minPayAmount\": 10000,\n    \"maxDiscountAmount\": 0,\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"inhousePayRate\": 50,\n    \"partnerPayRate\": 50,\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 0,\n    \"unlimitedCoupon\": false,\n    \"excludeFromExternalChannel\": false,\n    \"validDaysFromIssue\": 0,\n    \"serialCouponQty\": 100\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "등급 쿠폰 등록 실패 - 외부 채널 노출 설정",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"장바구니 쿠폰의 경우, 외부 채널 노출 설정을 할 수 없습니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"등급 쿠폰\",\n    \"couponAdminName\": \"등급 쿠폰\",\n    \"couponRegistrationType\": \"USER_GRADE\",\n    \"couponType\": \"CART\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": true,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 0,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"USER_GRADE\",\n    \"maxIssueCount\": 0,\n    \"maxIssueCountPerPerson\": 0,\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"NONE\",\n    \"validDaysFromIssue\": 0,\n    \"excludeFromExternalChannel\": true,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 100\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		},
		{
			"name": "등급 쿠폰 등록 실패 - 총 발급 제한 개수 설정",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"쿠폰 등록 실패 확인\", function () {",
							"    pm.expect(jsonData.result).to.eql(\"FAIL\");",
							"});",
							"",
							"pm.test(\"data 유효성 체크\", function () {",
							"    pm.expect(jsonData.data).to.be.null;",
							"});",
							"",
							"pm.test(\"error message 체크\", function () {",
							"    pm.expect(jsonData.message).to.include(\"등급 쿠폰은 총 발급 제한 개수를 설정할 수 없습니다.\");",
							"});",
							"",
							"pm.test(\"error_code 체크\", function () {",
							"    pm.expect(jsonData.error_code).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});",
							"",
							"pm.test(\"errorCode 체크\", function () {",
							"    pm.expect(jsonData.errorCode).to.equal(\"COMMON_INVALID_PARAMETER\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{inhouse_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"couponName\": \"등급 쿠폰\",\n    \"couponAdminName\": \"등급 쿠폰\",\n    \"couponRegistrationType\": \"USER_GRADE\",\n    \"couponType\": \"CART\",\n    \"firstCoupon\": false,\n    \"firstCouponType\": null,\n    \"duplicateAllowed\": true,\n    \"discountType\": \"FIXED_RATE\",\n    \"discountValue\": 10,\n    \"maxDiscountAmount\": 10000,\n    \"minPayAmount\": 0,\n    \"inhousePayRate\": 100,\n    \"partnerPayRate\": 0,\n    \"couponIssueType\": \"DIRECT\",\n    \"issueTarget\": \"USER_GRADE\",\n    \"maxIssueCount\": 10,\n    \"maxIssueCountPerPerson\": 0,\n    \"couponUsePlatform\": \"WEB_AND_APP\",\n    \"couponUsePeriodType\": \"NONE\",\n    \"validDaysFromIssue\": 0,\n    \"excludeFromExternalChannel\": false,\n    \"unlimitedCoupon\": false,\n    \"serialCouponQty\": 100\n}"
				},
				"url": {
					"raw": "{{host}}/inhouse-admin/v4/coupons",
					"host": [
						"{{host}}"
					],
					"path": [
						"inhouse-admin",
						"v4",
						"coupons"
					]
				}
			},
			"response": []
		}
	]
}